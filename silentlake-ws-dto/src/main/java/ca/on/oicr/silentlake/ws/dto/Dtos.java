package ca.on.oicr.silentlake.ws.dto;

import io.seqware.webservice.generated.model.Experiment;
import io.seqware.webservice.generated.model.ExperimentLibraryDesign;
import io.seqware.webservice.generated.model.ExperimentSpotDesign;
import io.seqware.webservice.generated.model.Registration;
import io.seqware.webservice.generated.model.Sample;
import io.seqware.webservice.generated.model.SequencerRun;
import io.seqware.webservice.generated.model.Study;

public class Dtos {

   public static UserDto asDto(Registration from) {
      UserDto returnDto = new UserDto();

      returnDto.setFirstName(from.getFirstName());
      returnDto.setLastName(from.getLastName());
      returnDto.setEmail(from.getEmail());
      if (from.getInstitution() != null) {
         returnDto.setInstitution(from.getInstitution());
      }

      return returnDto;
   }

   public static StudyDto asDto(Study from) {
      StudyDto returnDto = new StudyDto();

      returnDto.setTitle(from.getTitle());
      returnDto.setInstitution(from.getCenterName());
      returnDto.setInstitutionProjectName(from.getCenterProjectName());
      if (from.getDescription() != null) {
         returnDto.setDescription(from.getDescription());
      }
      // TODO:Check if type id needs to be here or if it is generated by the database
      return returnDto;
   }

   public static ExperimentLibraryDesignDto asDto(ExperimentLibraryDesign from) {
      ExperimentLibraryDesignDto returnDto = new ExperimentLibraryDesignDto();

      if (from.getName() != null) {
         returnDto.setName(from.getName());
      }
      if (from.getStrategy().getName() != null) {
         returnDto.setStrategy(from.getStrategy().getName()); // Double check if this is what we want
      }
      if (from.getSource().getName() != null) {
         returnDto.setSource(from.getSource().getName()); // Double check if this is what we want
         ;
      }
      if (from.getSelection().getName() != null) {
         returnDto.setSelection(from.getSelection().getName()); // Double check if this is what we want
      }
      return returnDto;
   }

   public static ExperimentSpotDesignDto asDto(ExperimentSpotDesign from) {
      ExperimentSpotDesignDto returnDto = new ExperimentSpotDesignDto();

      if (from.getReadsPerSpot() != null) {
         returnDto.setReadsPerSpot(from.getReadsPerSpot());
      }
      if (from.getReadSpec() != null) {
         returnDto.setReadSpec(from.getReadSpec());
      }

      return returnDto;
   }

   public static ExperimentDto asDto(Experiment from) {
      ExperimentDto returnDto = new ExperimentDto();

      if (from.getName() != null) {
         returnDto.setName(from.getName());
      }
      if (from.getSequenceSpace() != null) {
         returnDto.setSequencerSpace(returnDto.getSequencerSpace());
      }
      if (from.getQualityType() != null) {
         returnDto.setQualityType(from.getQualityType());
      }
      if (from.getPlatformId().getName() != null) {
         returnDto.setPlatform(from.getPlatformId().getName());
      }

      return returnDto;
   }

   public static SampleDto asDto(Sample from) {
      SampleDto returnDto = new SampleDto();

      // if (from.getSampleAttributeCollection() != null) {
      // returnDto.setAttributes(from.getSampleAttributeCollection()); //The get returns a Collection while the set requires a Set
      // }
      // TODO: Figure out to handle the Collection to Set issue above
      if (from.getName() != null) {
         returnDto.setName(from.getName());
      }
      // TODO: Find the field in the database containing the data to be held in project_name
      if (from.getType() != null) {
         returnDto.setSampleType(from.getType());
      }

      return returnDto;
   }

   public static SequencerRunDto asDto(SequencerRun from) {
      SequencerRunDto returnDto = new SequencerRunDto();

      if (from.getStatus() != null) {
         returnDto.setState(from.getStatus());
      }
      if (from.getName() != null) {
         returnDto.setName(from.getName());
      }
      if (from.getInstrumentName() != null) {
         returnDto.setInstrumentName(from.getInstrumentName());
      }
      // TODO: Determine which field in the database matches up with position
      return returnDto;
   }

}
